[
["index.html", "A Question on the Efficiency of Transit in Absurd Situations Part 1: The Idea Plan of Attack 1 Well Fuck", " A Question on the Efficiency of Transit in Absurd Situations Effi Feldblum 2018-07-29 Part 1: The Idea I was recently in a car with one of my best friends and his new wife1 (also a good friend of mine). We were making our way back from our parents joint 4th of July BBQ in Philadelphia towards Washington DC where we had all attended University. These two friends of mine were coming back down to prepare for their fast approaching move to NYC 2. Car talk moved towards talking about different public transit systems we’ve used both around the country and world. Being poor students and recent graduates and all moving in the near future, we are three of us particulary interested in our city’s system. This was, of course, mostly complaining about the systems and comparing their negatives. This led me to an, I think, interesting question: If you were to be dropped in a city at a random point within that cities limit and given another random point to get to, again within the city limits, which city would this be the easiest in? I will here be trying to begin answering that question. In order to simplify the scope of this exploration, I am limiting myself to looking at New York City, Washington DC, and Philadelphia3. Plan of Attack 1 Packages This analysis will be occuring entirely in R, so the first step is to load up some necessary packages to get started. Let’s Get Started The first idea I had in solving this was to create a box around each city, get the longitude-latitude codes of the two corners, then get random points using points &lt;- runif(num_points, lower_long/lat_barrier, upper_long/lat_barrier). As an example: x &lt;- data.frame( x= runif(3, 1,50), y = runif(3, 51, 100)) ## Warning in kable_styling(., bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;), ## full_width = FALSE, : Please specify format in kable. kableExtra can ## customize either HTML or LaTeX outputs. See https://haozhu233.github.io/ ## kableExtra/ for details. x y 41.88754 70.30159 33.96467 64.55878 28.65483 85.66599 Runif will return to us a specified set of random numbers (here 3) from a uniform distribution. It is a similar function to RandBetween in Excel. You can see the results in the table to the right. So, I needed to get approximated bounded corners for the city. The way I decided to do this was to use googlemaps functionality of finding longitude and latitude of any point clicked. So, after some slight maneuvering, we can use the two sets of coordinates to create this: Great! Okay, so we can use our coordinate codes of -75.381713, 40.143756 and -74.949813, 39.885019 within our runif function. As a test, I’ll generate 100 random points and map them out. Below I’ve provided a sample of the points in a table. longitude &lt;-runif(100, -75.381713, -74.949813) latitude &lt;- runif(100, 39.885019, 40.143756) my_df &lt;- data.frame(longitude, latitude) ## Warning in kable_styling(., bootstrap_options = c(&quot;striped&quot;), full_width ## = FALSE, : Please specify format in kable. kableExtra can customize either ## HTML or LaTeX outputs. See https://haozhu233.github.io/kableExtra/ for ## details. longitude latitude -75.27642 40.04300 -75.20162 40.10479 -75.16199 39.90053 -75.17840 40.05557 -74.95615 40.01474 -75.14382 39.99107 -75.21718 40.08841 -74.96693 39.91104 -75.21110 39.99611 -75.07148 39.96502 Well Fuck Clearly this is an issue. Cities are not specificially oriented in the plot of the Earth’s coordinate system, they are a “random” human choice. Even worse (becuase with motivation, the perspective of the graph can be changed), cities are weird shapes. Humans shaped these amazing metropolises that span whatever land they decide. A very cool thought, but highly inconvenient for me. One of only 3 positions in life that take shotgun seat in front of good friend. The other two being parents and grandparents.↩ This made the trip much more annoying. In Philadelphia they had purchased a new caspar mattress during a 4th of July sale. My friend had done this forgetting he’d offered me a ride…the mattress and I were quite squished in back seat.↩ The reason for this is purely personal. I had spent the best 10 years of my childhood around Philadelphia. The three of us in the car had attended University of Maryland, and so had used DC public transportation regularly over the last 4 years. Lastly, my friends were two weeks from moving to NYC to start their lives together.↩ "],
["part-2-shapefiles-and-progress.html", "Part 2: Shapefiles and Progress Getting Routes Our first “good” data", " Part 2: Shapefiles and Progress The main lesson from part 1 is that I’m going to have to be a little less lazy in this project. The minitua is that I needed: a way to graph only the city limits itself a way to generate random points within that irregular polygon Googling told me that what I needed was a shapefile, “The shapefile format is a popular geospatial vector data format for geographic information system (GIS) software…The shapefile format can spatially describe vector features: points, lines, and polygons, representing, for example, water wells, rivers, and lakes.”4 At first, it looked like this required me to download a bunch of files from the internet and load them all into R. At first because of the blessed package Tigris which allows users to download shapefiles from the US Census Bureau. The below code is using the TIGRIS package to grab the files for Philadelphia, New York City, and Washington D.C. Okay great - we have our city polygons. ## Getting Random Points {-} To work with the shapefiles in R, the package sp was used. This package has a great function spsample which magically spits out the random numbers. At first, I still thought I’d have to figure out how to divide the cities into shapes I could find random points within then recombine. I thought a good starting point would be to get 300 points, 150 origin and 150 destination, and find the directions between them. I’ll show an example of that workflow using only Philadelphia. number_sample &lt;- 150 #This is the number of trips we want to test city_file &lt;- philly #This is what city to get points for origin &lt;- spsample(city_file, n = number_sample, &quot;random&quot;) %&gt;% as.data.frame() origin &lt;- origin %&gt;% select(startLat = y , startLon = x) %&gt;% mutate(trip_id = 1:nrow(origin)) destination &lt;- spsample(city_file, n = number_sample, &quot;random&quot;) %&gt;% as.data.frame() destination &lt;- destination %&gt;% select(endLat = y , endLon = x) %&gt;% mutate(trip_id = 1:nrow(destination)) #To combine the origins and destinations trip &lt;- left_join(origin,destination,by = &quot;trip_id&quot;) %&gt;% select(trip_id,startLat, startLon, endLat, endLon) Now if we want to view the “routes” themselves if the one went as the bird flew. Getting Routes So now we have this shit. great package google way // attaches to google api googleway_raw_data &lt;- lapply(1:nrow(trip), function(x){ google_distance(origin = (locations[x, 2:3]), destination = (locations[x, 4:5]), key = key, mode = &quot;transit&quot;) }) This results in a list of lists where each holds the data of 1 trip. googleway_raw_data[[5]] #looking at the fifth list, which is also the fifth set of coordinates ## $destination_addresses ## [1] &quot;I-95, Philadelphia, PA 19153, USA&quot; ## ## $origin_addresses ## [1] &quot;4027 Conshohocken Ave, Philadelphia, PA 19131, USA&quot; ## ## $rows ## elements ## 1 24.1 km, 24149, 1 hour 22 mins, 4930, OK ## ## $status ## [1] &quot;OK&quot; So, some serious data munging is needed… cue the montage music foo &lt;- do.call(what = &quot;rbind&quot;, args = lapply(googleway_raw_data, as.data.frame)) foo &lt;- separate(foo, elements, into = c(&quot;km&quot;, &quot;value&quot;, &quot;duration&quot;, &quot;value2&quot;, &quot;currency&quot;, &quot;cost&quot;, &quot;uk&quot;, &quot;status2&quot;), &quot;,&quot;) foo &lt;- select(foo, destination_addresses, origin_addresses, km, duration, cost, status) head(foo) ## destination_addresses ## 1 1551 Franklin Mills Cir, Philadelphia, PA 19154, USA ## 2 41 N 6th St, Philadelphia, PA 19106, USA ## 3 1836 Arthur St, Philadelphia, PA 19152, USA ## 4 2124 W Oxford St, Philadelphia, PA 19121, USA ## 5 I-95, Philadelphia, PA 19153, USA ## 6 2025 Windrim Ave, Philadelphia, PA 19144, USA ## origin_addresses ## 1 3222 S 13th St, Philadelphia, PA 19148, USA ## 2 1914 Reilly Rd, Philadelphia, PA 19115, USA ## 3 11209 Waldemire Dr, Philadelphia, PA 19154, USA ## 4 1562 Pattison Ave, Philadelphia, PA 19145, USA ## 5 4027 Conshohocken Ave, Philadelphia, PA 19131, USA ## 6 117 Spring Garden St, Philadelphia, PA 19123, USA ## km ## 1 list(distance = list(text = &quot;36.0 km&quot; ## 2 list(distance = list(text = &quot;21.3 km&quot; ## 3 list(distance = list(text = &quot;9.5 km&quot; ## 4 list(distance = list(text = &quot;9.4 km&quot; ## 5 list(distance = list(text = &quot;24.1 km&quot; ## 6 list(distance = list(text = &quot;11.2 km&quot; ## duration cost status ## 1 duration = list(text = &quot;1 hour 47 mins&quot; text = &quot;$4.50&quot; OK ## 2 duration = list(text = &quot;58 mins&quot; text = &quot;$3.50&quot; OK ## 3 duration = list(text = &quot;42 mins&quot; text = &quot;$2.50&quot; OK ## 4 duration = list(text = &quot;43 mins&quot; text = &quot;$3.50&quot; OK ## 5 duration = list(text = &quot;1 hour 22 mins&quot; &lt;NA&gt; OK ## 6 duration = list(text = &quot;23 mins&quot; &lt;NA&gt; OK Now to get rid of all that annoying fluff5 ##source of numextract function: http://stla.github.io/stlapblog/posts/Numextract.html numextract &lt;- function(string){ str_extract(string, &quot;\\\\-*\\\\d+\\\\.*\\\\d*&quot;) } foo$km &lt;- lapply(foo$km, numextract)%&gt;% as.numeric() foo$cost &lt;- substring(foo$cost, 11) foo$cost &lt;- substr(foo$cost,1,nchar(foo$cost)-1) %&gt;% as.numeric() foo$duration &lt;- substring(foo$duration, 26) foo$duration &lt;- substr(foo$duration,1,nchar(foo$duration)-1) #Splitting up duration from XX hour(s) XX minute(s), to seperate columns foo1 &lt;- separate(foo, duration, into = c(&quot;hours&quot;, &quot;minutes&quot;), sep = -7) foo1$hours &lt;- gsub(&quot;[^0-9]&quot;, &quot;&quot;, foo1$hours) foo1$minutes &lt;- gsub(&quot;[^0-9]&quot;, &quot;&quot;,foo1$minutes) foo1$hours &lt;- as.numeric(foo1$hours) foo1$minutes &lt;- as.numeric(foo1$minutes) #for trips that take less than an hour #doesnt murk with invalid trips because of other apparent NAS foo1$hours[is.na(foo1$hours)] &lt;- 0 #creating a total minutes section foo1 &lt;- foo1 %&gt;% mutate(duration_minutes = (hours*60)+minutes)%&gt;% mutate(trip_id = 1:nrow(foo1)) #merging with trip to have coordinates full_AB_GOOGLE &lt;- left_join(foo1, trip,by = &quot;trip_id&quot;) Our first “good” data Let’s take a quick peak at what the data tells us before moving on. #selecting a few choice variables and adding miles foo &lt;- full_AB_GOOGLE %&gt;% select(trip_id, kilometers = km, duration = duration_minutes, cost)%&gt;% mutate(miles = round(kilometers/1.609344, digits =1)) miles &lt;- as.data.frame(c(summary(foo$miles))) duration &lt;-as.data.frame(c(summary(foo$duration))) summary1 &lt;- cbind(miles, duration)%&gt;% round(digits =2) colnames(summary1) &lt;- c(&quot;miles&quot;, &quot;durations&quot;) summary1 %&gt;% kable() %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;), full_width = FALSE, position = &quot;float_right&quot;) miles durations Min. 1.20 7.00 1st Qu. 6.75 46.25 Median 10.70 65.50 Mean 11.44 69.53 3rd Qu. 14.83 90.00 Max. 28.80 152.00 NA’s 8.00 8.00 Wikipedia ShapefileArticle↩ I hope it’s clear enough from the code chunk, but I want to make it clear that the numextract function is not my own. I found it on: http://stla.github.io/stlapblog/posts/Numextract.html↩ "],
["part-3-more-trips.html", "Part 3: More Trips Getting the Routes using Google API", " Part 3: More Trips At this point we’ve found directions from 150 points to a seperate set of 150 points that were derived from within each city’s shapefile. This, honestly, seemed a bit weak to me. It answers the question…kind of. The hypothetical situation seemed to call for, well, more points. So the idea is this: Forget about origins and destinations and combine the 300 points into one list Find directions from each point to the other 299 points #Changing the column names to allow binding col_names &lt;- c(&quot;latitude&quot;, &quot;longitude&quot; ) #Getting the columns wanted from origin and destination, then changing the column names coordinates &lt;- list(origin, destination)%&gt;% lapply( function(x) { subset(x, select= -trip_id) }) %&gt;% lapply(setNames, nm = col_names) #combining the origin and destination coordinate points loc_both &lt;- rbind(coordinates[[1]],coordinates[[2]]) #splitting each individual set of coordinates into their own dataframe a &lt;- loc_both %&gt;% apply(1, as.data.frame) #Creating a function that takes each dataframe of a list(here a), replicates the rows the number of times needed, then creates another 2 columns where the other 300 points go (including a duplicate) multi.lapply &lt;- function(a){ len &lt;- nrow(loc_both) a &lt;- lapply(a, function(x) apply(x, 1, t)) c &lt;- lapply(a, as.data.frame) d &lt;- lapply(c, t) e &lt;- lapply(d, function(x) apply(x, 2, rep, len)) f &lt;- lapply(e, function(x) cbind(x, 2, loc_both)) new_col_name &lt;- c(&quot;startLat&quot;, &quot;startLon&quot;, &quot;trip&quot;, &quot;endLat&quot;, &quot;endLon&quot;) g &lt;- lapply(f, setNames, nm = new_col_name) h &lt;- bind_rows(g) return(h) } #Running the created function philly_300_points &lt;- multi.lapply(a) philly_300_pointsraw &lt;-philly_300_points[c(3,1,2,4,5)] #removing the duplicate rows philly_300_points &lt;- philly_300_pointsraw %&gt;% filter(startLat != endLat, startLon != endLon) head(philly_300_points) ## trip startLat startLon endLat endLon ## 1 origin 39.88889 -75.23410 2 39.88889 ## 2 origin 39.88889 -75.23410 2 39.98515 ## 3 origin 39.88889 -75.23410 2 40.04527 ## 4 origin 39.88889 -75.23410 2 40.03974 ## 5 origin 39.88889 -75.23410 2 39.99388 ## 6 origin 39.88889 -75.23410 2 39.98436 So now we have a dataframe of 89700 rows. Which is a subset of the 300*300 = 90,000 observations we expected. This is because each trip has one duplicate row (where the starting longitude = the ending longitude and the starting latitude = the ending latitude). Getting the Routes using Google API As before, we’ll be using the googleway package to access the google maps API 6. However, I had no interest in letting this function run for the next however much time. A friend of mine recommended looking into parallel computing over the cloud. It was the perfect recommendation. I setup an AWS account and got an Rstudio environment running, which was a bit of a headache. On July 18, I had finally gotten it up and running. That night I went to sleep and left my computer on as my data was processed. pls &lt;- mclapply(1:nrow(tfoo), function(x){ google_distance(origin = (tfoo[x, 1:2]), destination = (tfoo[x, 4:5]), key = ky, mode = &quot;transit&quot;) }) Spoilder alert: not for long.↩ "],
["part-4-a-catastrophic-issue.html", "Part 4: A Catastrophic Issue Finding a Replacement for Google Routes API Running this Code without Emptying my Pockets", " Part 4: A Catastrophic Issue Okay, I woke up the morning of the July 19th and found the two biggest roadblocks of the project waiting at my computer. What made it castrophic was that, along with these two issues, I had my first set of 90,000 routes. The first issue was that that day, Google had begun charging for their previously free API. A disastear for my student pockets, and so close to the solution. Well, I was too close to not try and find a replacement. The second issue was that my use of AWS had cost around $50, not something I was expected. Ooops. Well let’s try and solve the first issue first. Finding a Replacement for Google Routes API Finding another API was only a mild headache. The most annoying aspect was finding one that suppored transit routes and not exclusively driving directions. To the rescue: Here API. It had everything I wanted, except that no kind soul had made an R package to easily access it. It became pretty obvious during that day of research that Here was my best option. I would have to write some of my own functions to get it to work. Functions Basically, I want to take my 3 lists of 90,000 rows and 360,000 indivudal cooridnates and feed them into the Here API. The API requires that the link I use look like: route.cit.api.here .com/routing/7.2/calculateroute.json?waypoint0=52.5208%2C13.4093&amp;waypoint1=52.5034%2C13.3295&amp;mode=fastest%3BpublicTransport &amp;combineChange=true&amp;app_id=DemoAppId01082013GAL&amp;app_code=AJKnXv84fjrb0KIHawS0Tg&quot; All coordinates needed to be adjusted to be strings that resemble 52.5208%2C13.4093. here_mcoord_fix &lt;- function(df){ latitude &lt;- df[,1] longitude &lt;- df[,2] url2 &lt;- paste0(longitude, &quot;%2C&quot;, latitude) return(url2) } Now, there are several constants in the URL that can be set to variables. Then everything can be easily pasted together into proper URLS. base_url &lt;- &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json&quot; xmode &lt;- &quot;&amp;mode=fastest%3BpublicTransport&amp;combineChange=true&quot; #these two are different per API User id &lt;- &quot;&amp;app_id=SOME_NUMBERS_AND_LETTERS&amp;&quot; code &lt;- &quot;app_code=SOME_NUMBERS_AND_LETTERS&amp;departure=2018-07-18T11:00:00-05:00&quot; And here’s the function that pulls everything together. It contains the here_mcoord_fix function within to cut steps down. get_here_urls &lt;- function(origin, destination){ xorigin &lt;- here_mcoord_fix(origin) xdestination &lt;- here_mcoord_fix(destination) z &lt;- paste0(base_url,&quot;?waypoint0=&quot;,xorigin, &quot;&amp;waypoint1=&quot;, xdestination, xmode, id, code, sep=&quot;&quot;) return(z) } So let me show the output: origin &lt;- philly_300_points%&gt;% select(startLon, startLat) destination &lt;- philly_300_points%&gt;% select(endLon, endLat) urls &lt;- get_here_urls(origin, destination) #Let&#39;s take a peak at a random 1 of 89700 URLs we&#39;ve created. urls[runif(1, 1,89700)] ## [1] &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.99505%2C-75.10384&amp;waypoint1=2%2C40.0432354724932&amp;mode=fastest%3BpublicTransport&amp;combineChange=true&amp;app_id=SOME_NUMBERS_AND_LETTERS&amp;app_code=SOME_NUMBERS_AND_LETTERS&amp;departure=2018-07-18T11:00:00-05:00&quot; Running this Code without Emptying my Pockets So, I decided not to use AWS anymore…maybe if I had deep pockets I would, but I had decided to find an alternative. The first thing I learned was that I did not7 really fully understand parallel computing. There were better functions than mclapply available. The second thing I realized that I was obsessed with doing the work on the cloud. On one hand, the cloud is definietly better. On the other hand, only if you’ve got that cash-money. The solution was to use the DoParallel package with computers that have multiple cores, thus performing parallel computations on each core. Getting DoParallel Up and Running #Setting up parallel with one less core than available on the computer. This is to avoid intense crashing. no_cores &lt;- detectCores() - 1 cl &lt;- makeCluster(no_cores) registerDoParallel(cl) #To see if that worked: if it returns 1 - then it didn&#39;t work getDoParWorkers() #To end the parallel cores registerDoSEQ() getDoParWorkers() Getting the functions ready to access the here API The first step is getting it running before going parallel and seeing what the outputs look like. There are some messy looking results so I’ve tabbed this section to maintain readability. Feel free to look through it if you’re interested. Each tab is a view of each output. Everything The first step is getting it running before going parallel and seeing what the outputs look like: #We&#39;ll use one random url to test url_test &lt;- urls[runif(1, 1,89700)] require(httr) require(jsonlite) GET_url_test &lt;- GET(url_test) content_url_test &lt;- content(GET_url_test, &quot;text&quot;) json_url_test &lt;- fromJSON(content_url_test, flatten = TRUE) final_url_test &lt;- as.data.frame(json_url_test) Step 1 GET_url_test ## Response [https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.891007017175%2C-75.1736776842591&amp;waypoint1=39.9018409331484%2C-75.1355796363872&amp;mode=fastest%3BpublicTransport&amp;combineChange=true&amp;app_id=geLVK2d13btBHVl3K7zM&amp;app_code=YsaWhU8qeIQtiFlSVFf7gg&amp;departure=2018-07-18T11:00:00-05:00] ## Date: 2018-07-23 23:06 ## Status: 200 ## Content-Type: application/json;charset=utf-8 ## Size: 9.82 kB ## {&quot;response&quot;:{&quot;metaInfo&quot;:{&quot;timestamp&quot;:&quot;2018-07-23T23:06:49Z&quot;,&quot;mapVersion&quot;... There are a few good pieces of news in this code: The status is 200 meaning it worked8 The data is in JSON format *The size is not absurd Step 2 content_url_test &lt;- content(GET_url_test, &quot;text&quot;) ## [1] &quot;{\\&quot;response\\&quot;:{\\&quot;metaInfo\\&quot;:{\\&quot;timestamp\\&quot;:\\&quot;2018-07-23T23:08:13Z\\&quot;,\\&quot;mapVersion\\&quot;:\\&quot;8.30.85.156\\&quot;,\\&quot;moduleVersion\\&quot;:\\&quot;7.2.201829-33197\\&quot;,\\&quot;interfaceVersion\\&quot;:\\&quot;2.6.34\\&quot;,\\&quot;availableMapVersion\\&quot;:[\\&quot;8.30.85.156\\&quot;]},\\&quot;route\\&quot;:[{\\&quot;waypoint\\&quot;:[{\\&quot;linkId\\&quot;:\\&quot;+18693161\\&quot;,\\&quot;mappedPosition\\&quot;:{\\&quot;latitude\\&quot;:40.0568444,\\&quot;longitude\\&quot;:-75.1911711},\\&quot;originalPosition\\&quot;:{\\&quot;latitude\\&quot;:40.0567437,\\&quot;longitude\\&quot;:-75.19102},\\&quot;type\\&quot;:\\&quot;stopOver\\&quot;,\\&quot;spot\\&quot;:0.3478261,\\&quot;sideOfStreet\\&quot;:\\&quot;right\\&quot;,\\&quot;mappedRoadName\\&quot;:\\&quot;W Mt Pleasant Ave\\&quot;,\\&quot;label\\&quot;:\\&quot;W Mt Pleasant Ave\\&quot;,\\&quot;shapeIndex\\&quot;:0},{\\&quot;linkId\\&quot;:\\&quot;+18769947\\&quot;,\\&quot;mappedPosition\\&quot;:{\\&quot;latitude\\&quot;:39.8786749,\\&quot;longitude\\&quot;:-75.2075897},\\&quot;originalPosition\\&quot;:{\\&quot;latitude\\&quot;:39.8777652,\\&quot;longitude\\&quot;:-75.2059473},\\&quot;type\\&quot;:\\&quot;stopOver\\&quot;,\\&quot;spot\\&quot;:0.4118199,\\&quot;sideOfStreet\\&quot;:\\&quot;neither\\&quot;,\\&quot;mappedRoadName\\&quot;:\\&quot;Fort Mifflin Rd\\&quot;,\\&quot;label\\&quot;:\\&quot;Fort Mifflin Rd\\&quot;,\\&quot;shapeIndex\\&quot;:188}],\\&quot;mode\\&quot;:{\\&quot;type\\&quot;:\\&quot;fastest\\&quot;,\\&quot;transportModes\\&quot;:[\\&quot;publicTransport\\&quot;],\\&quot;trafficMode\\&quot;:\\&quot;disabled\\&quot;,\\&quot;feature\\&quot;:[]},\\&quot;leg\\&quot;:[{\\&quot;start\\&quot;:{\\&quot;linkId\\&quot;:\\&quot;+18693161\\&quot;,\\&quot;mappedPosition\\&quot;:{\\&quot;latitude\\&quot;:40.0568444,\\&quot;longitude\\&quot;:-75.1911711},\\&quot;originalPosition\\&quot;:{\\&quot;latitude\\&quot;:40.0567437,\\&quot;longitude\\&quot;:-75.19102},\\&quot;type\\&quot;:\\&quot;stopOver\\&quot;,\\&quot;spot\\&quot;:0.3478261,\\&quot;sideOfStreet\\&quot;:\\&quot;right\\&quot;,\\&quot;mappedRoadName\\&quot;:\\&quot;W Mt Pleasant Ave\\&quot;,\\&quot;label\\&quot;:\\&quot;W Mt Pleasant Ave\\&quot;,\\&quot;shapeIndex\\&quot;:0},\\&quot;end\\&quot;:{\\&quot;linkId\\&quot;:\\&quot;+18769947\\&quot;,\\&quot;mappedPosition\\&quot;:{\\&quot;latitude\\&quot;:39.8786749,\\&quot;longitude\\&quot;:-75.2075897},\\&quot;originalPosition\\&quot;:{\\&quot;latitude\\&quot;:39.8777652,\\&quot;longitude\\&quot;:-75.2059473},\\&quot;type\\&quot;:\\&quot;stopOver\\&quot;,\\&quot;spot\\&quot;:0.4118199,\\&quot;sideOfStreet\\&quot;:\\&quot;neither\\&quot;,\\&quot;mappedRoadName\\&quot;:\\&quot;Fort Mifflin Rd\\&quot;,\\&quot;label\\&quot;:\\&quot;Fort Mifflin Rd\\&quot;,\\&quot;shapeIndex\\&quot;:188},\\&quot;length\\&quot;:27716,\\&quot;travelTime\\&quot;:9066,\\&quot;maneuver\\&quot;:[{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:40.0568444,\\&quot;longitude\\&quot;:-75.1911711},\\&quot;instruction\\&quot;:\\&quot;Head &lt;span class=\\\\\\&quot;heading\\\\\\&quot;&gt;northeast&lt;/span&gt; on &lt;span class=\\\\\\&quot;street\\\\\\&quot;&gt;W Mt Pleasant Ave&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;228 m&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:237,\\&quot;length\\&quot;:228,\\&quot;id\\&quot;:\\&quot;M1\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:40.0583732,\\&quot;longitude\\&quot;:-75.189389},\\&quot;instruction\\&quot;:\\&quot;Turn &lt;span class=\\\\\\&quot;direction\\\\\\&quot;&gt;left&lt;/span&gt; onto &lt;span class=\\\\\\&quot;next-street\\\\\\&quot;&gt;Germantown Ave&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;19 m&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:19,\\&quot;length\\&quot;:19,\\&quot;id\\&quot;:\\&quot;M2\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:40.0583732,\\&quot;longitude\\&quot;:-75.189389},\\&quot;instruction\\&quot;:\\&quot;Go to the stop &lt;span class=\\\\\\&quot;station\\\\\\&quot;&gt;Germantown Av &amp; Mt Pleasant Av&lt;/span&gt; and take the &lt;span class=\\\\\\&quot;transit\\\\\\&quot;&gt;bus&lt;/span&gt; &lt;span class=\\\\\\&quot;line\\\\\\&quot;&gt;23&lt;/span&gt; toward &lt;span class=\\\\\\&quot;destination\\\\\\&quot;&gt;11th St &amp; Market St -&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Follow for &lt;span class=\\\\\\&quot;stops\\\\\\&quot;&gt;43 stops&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:1770,\\&quot;length\\&quot;:6529,\\&quot;id\\&quot;:\\&quot;M3\\&quot;,\\&quot;stopName\\&quot;:\\&quot;Germantown Av &amp; Mt Pleasant Av\\&quot;,\\&quot;_type\\&quot;:\\&quot;PublicTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:40.0094068,\\&quot;longitude\\&quot;:-75.1509583},\\&quot;instruction\\&quot;:\\&quot;Get off at &lt;span class=\\\\\\&quot;station\\\\\\&quot;&gt;Germantown Av &amp; Erie Av&lt;/span&gt;.\\&quot;,\\&quot;travelTime\\&quot;:0,\\&quot;length\\&quot;:0,\\&quot;id\\&quot;:\\&quot;M4\\&quot;,\\&quot;stopName\\&quot;:\\&quot;Germantown Av &amp; Erie Av\\&quot;,\\&quot;nextRoadName\\&quot;:\\&quot;Germantown Ave\\&quot;,\\&quot;_type\\&quot;:\\&quot;PublicTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:40.0094068,\\&quot;longitude\\&quot;:-75.1509583},\\&quot;instruction\\&quot;:\\&quot;Head &lt;span class=\\\\\\&quot;heading\\\\\\&quot;&gt;east&lt;/span&gt; on &lt;span class=\\\\\\&quot;street\\\\\\&quot;&gt;Germantown Ave&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;28 m&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:41,\\&quot;length\\&quot;:28,\\&quot;id\\&quot;:\\&quot;M5\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:40.0092137,\\&quot;longitude\\&quot;:-75.1508081},\\&quot;instruction\\&quot;:\\&quot;Turn &lt;span class=\\\\\\&quot;direction\\\\\\&quot;&gt;right&lt;/span&gt; onto &lt;span class=\\\\\\&quot;next-street\\\\\\&quot;&gt;W Erie Ave&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;36 m&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:46,\\&quot;length\\&quot;:36,\\&quot;id\\&quot;:\\&quot;M6\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:40.0092459,\\&quot;longitude\\&quot;:-75.1512265},\\&quot;instruction\\&quot;:\\&quot;Turn &lt;span class=\\\\\\&quot;direction\\\\\\&quot;&gt;left&lt;/span&gt; onto &lt;span class=\\\\\\&quot;next-street\\\\\\&quot;&gt;N Broad St&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;3 m&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:3,\\&quot;length\\&quot;:3,\\&quot;id\\&quot;:\\&quot;M7\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:40.0092459,\\&quot;longitude\\&quot;:-75.1513124},\\&quot;instruction\\&quot;:\\&quot;Go to the station &lt;span class=\\\\\\&quot;station\\\\\\&quot;&gt;Erie Station&lt;/span&gt; and take the &lt;span class=\\\\\\&quot;transit\\\\\\&quot;&gt;rail&lt;/span&gt; &lt;span class=\\\\\\&quot;line\\\\\\&quot;&gt;BSL&lt;/span&gt; toward &lt;span class=\\\\\\&quot;destination\\\\\\&quot;&gt;at&amp;T Station&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Follow for &lt;span class=\\\\\\&quot;stops\\\\\\&quot;&gt;15 stations&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:1610,\\&quot;length\\&quot;:10420,\\&quot;id\\&quot;:\\&quot;M8\\&quot;,\\&quot;stopName\\&quot;:\\&quot;Erie Station\\&quot;,\\&quot;_type\\&quot;:\\&quot;PublicTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:39.9167848,\\&quot;longitude\\&quot;:-75.1714182},\\&quot;instruction\\&quot;:\\&quot;Get off at &lt;span class=\\\\\\&quot;station\\\\\\&quot;&gt;Oregon Station&lt;/span&gt;.\\&quot;,\\&quot;travelTime\\&quot;:0,\\&quot;length\\&quot;:0,\\&quot;id\\&quot;:\\&quot;M9\\&quot;,\\&quot;stopName\\&quot;:\\&quot;Oregon Station\\&quot;,\\&quot;_type\\&quot;:\\&quot;PublicTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:39.9167848,\\&quot;longitude\\&quot;:-75.1714182},\\&quot;instruction\\&quot;:\\&quot;Head &lt;span class=\\\\\\&quot;heading\\\\\\&quot;&gt;northeast&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;10 m&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:14,\\&quot;length\\&quot;:10,\\&quot;id\\&quot;:\\&quot;M10\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:39.9168277,\\&quot;longitude\\&quot;:-75.1713324},\\&quot;instruction\\&quot;:\\&quot;Turn &lt;span class=\\\\\\&quot;direction\\\\\\&quot;&gt;slightly left&lt;/span&gt; onto &lt;span class=\\\\\\&quot;next-street\\\\\\&quot;&gt;S Broad St&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;25 m&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:25,\\&quot;length\\&quot;:25,\\&quot;id\\&quot;:\\&quot;M11\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:39.9168277,\\&quot;longitude\\&quot;:-75.1713324},\\&quot;instruction\\&quot;:\\&quot;Go to the stop &lt;span class=\\\\\\&quot;station\\\\\\&quot;&gt;Oregon Av &amp; Broad St&lt;/span&gt; and take the &lt;span class=\\\\\\&quot;transit\\\\\\&quot;&gt;bus&lt;/span&gt; &lt;span class=\\\\\\&quot;line\\\\\\&quot;&gt;68&lt;/span&gt; toward &lt;span class=\\\\\\&quot;destination\\\\\\&quot;&gt;69th St Transportation Center South Terminal&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Follow for &lt;span class=\\\\\\&quot;stops\\\\\\&quot;&gt;16 stops&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:2720,\\&quot;length\\&quot;:7864,\\&quot;id\\&quot;:\\&quot;M12\\&quot;,\\&quot;stopName\\&quot;:\\&quot;Oregon Av &amp; Broad St\\&quot;,\\&quot;_type\\&quot;:\\&quot;PublicTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:39.8836005,\\&quot;longitude\\&quot;:-75.2235281},\\&quot;instruction\\&quot;:\\&quot;Get off at &lt;span class=\\\\\\&quot;station\\\\\\&quot;&gt;Enterprise Av &amp; Fort Mifflin Rd&lt;/span&gt;.\\&quot;,\\&quot;travelTime\\&quot;:0,\\&quot;length\\&quot;:0,\\&quot;id\\&quot;:\\&quot;M13\\&quot;,\\&quot;stopName\\&quot;:\\&quot;Enterprise Av &amp; Fort Mifflin Rd\\&quot;,\\&quot;nextRoadName\\&quot;:\\&quot;Enterprise Ave\\&quot;,\\&quot;_type\\&quot;:\\&quot;PublicTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:39.8836005,\\&quot;longitude\\&quot;:-75.2235281},\\&quot;instruction\\&quot;:\\&quot;Head &lt;span class=\\\\\\&quot;heading\\\\\\&quot;&gt;northwest&lt;/span&gt; on &lt;span class=\\\\\\&quot;street\\\\\\&quot;&gt;Enterprise Ave&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;32 m&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:42,\\&quot;length\\&quot;:32,\\&quot;id\\&quot;:\\&quot;M14\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:39.8837721,\\&quot;longitude\\&quot;:-75.223335},\\&quot;instruction\\&quot;:\\&quot;Turn &lt;span class=\\\\\\&quot;direction\\\\\\&quot;&gt;right&lt;/span&gt; onto &lt;span class=\\\\\\&quot;next-street\\\\\\&quot;&gt;Fort Mifflin Rd&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;1.7 km&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:1723,\\&quot;length\\&quot;:1713,\\&quot;id\\&quot;:\\&quot;M15\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:39.8775494,\\&quot;longitude\\&quot;:-75.2135289},\\&quot;instruction\\&quot;:\\&quot;Turn &lt;span class=\\\\\\&quot;direction\\\\\\&quot;&gt;left&lt;/span&gt; onto &lt;span class=\\\\\\&quot;next-street\\\\\\&quot;&gt;Fort Mifflin Rd&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;75 m&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:76,\\&quot;length\\&quot;:75,\\&quot;id\\&quot;:\\&quot;M16\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:39.8770881,\\&quot;longitude\\&quot;:-75.2129066},\\&quot;instruction\\&quot;:\\&quot;Take the street on the &lt;span class=\\\\\\&quot;direction\\\\\\&quot;&gt;right&lt;/span&gt;. &lt;span class=\\\\\\&quot;distance-description\\\\\\&quot;&gt;Go for &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;734 m&lt;/span&gt;.&lt;/span&gt;\\&quot;,\\&quot;travelTime\\&quot;:740,\\&quot;length\\&quot;:734,\\&quot;id\\&quot;:\\&quot;M17\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;},{\\&quot;position\\&quot;:{\\&quot;latitude\\&quot;:39.8786749,\\&quot;longitude\\&quot;:-75.2075897},\\&quot;instruction\\&quot;:\\&quot;Arrive at &lt;span class=\\\\\\&quot;street\\\\\\&quot;&gt;Fort Mifflin Rd&lt;/span&gt;.\\&quot;,\\&quot;travelTime\\&quot;:0,\\&quot;length\\&quot;:0,\\&quot;id\\&quot;:\\&quot;M18\\&quot;,\\&quot;_type\\&quot;:\\&quot;PrivateTransportManeuverType\\&quot;}]}],\\&quot;publicTransportLine\\&quot;:[{\\&quot;lineName\\&quot;:\\&quot;23\\&quot;,\\&quot;companyName\\&quot;:\\&quot;\\&quot;,\\&quot;destination\\&quot;:\\&quot;11th St &amp; Market St -\\&quot;,\\&quot;type\\&quot;:\\&quot;busPublic\\&quot;,\\&quot;id\\&quot;:\\&quot;L1\\&quot;},{\\&quot;lineName\\&quot;:\\&quot;BSL\\&quot;,\\&quot;lineForeground\\&quot;:\\&quot;#FF9933\\&quot;,\\&quot;lineBackground\\&quot;:\\&quot;#FF9933\\&quot;,\\&quot;companyName\\&quot;:\\&quot;\\&quot;,\\&quot;destination\\&quot;:\\&quot;at&amp;T Station\\&quot;,\\&quot;type\\&quot;:\\&quot;railMetro\\&quot;,\\&quot;id\\&quot;:\\&quot;L2\\&quot;},{\\&quot;lineName\\&quot;:\\&quot;68\\&quot;,\\&quot;companyName\\&quot;:\\&quot;\\&quot;,\\&quot;destination\\&quot;:\\&quot;69th St Transportation Center South Terminal\\&quot;,\\&quot;type\\&quot;:\\&quot;busPublic\\&quot;,\\&quot;id\\&quot;:\\&quot;L3\\&quot;}],\\&quot;summary\\&quot;:{\\&quot;distance\\&quot;:27716,\\&quot;baseTime\\&quot;:9066,\\&quot;flags\\&quot;:[\\&quot;noThroughRoad\\&quot;,\\&quot;builtUpArea\\&quot;,\\&quot;park\\&quot;,\\&quot;privateRoad\\&quot;],\\&quot;text\\&quot;:\\&quot;The trip takes &lt;span class=\\\\\\&quot;length\\\\\\&quot;&gt;27.7 km&lt;/span&gt; and &lt;span class=\\\\\\&quot;time\\\\\\&quot;&gt;2:31 h&lt;/span&gt;.\\&quot;,\\&quot;travelTime\\&quot;:9066,\\&quot;departure\\&quot;:\\&quot;2018-07-18T12:00:00-04:00\\&quot;,\\&quot;_type\\&quot;:\\&quot;PublicTransportRouteSummaryType\\&quot;}}],\\&quot;language\\&quot;:\\&quot;en-us\\&quot;}}\\n&quot; Step 3 json_url_test &lt;- fromJSON(content_url_test, flatten = TRUE) ## $response ## $response$metaInfo ## $response$metaInfo$timestamp ## [1] &quot;2018-07-23T23:08:13Z&quot; ## ## $response$metaInfo$mapVersion ## [1] &quot;8.30.85.156&quot; ## ## $response$metaInfo$moduleVersion ## [1] &quot;7.2.201829-33197&quot; ## ## $response$metaInfo$interfaceVersion ## [1] &quot;2.6.34&quot; ## ## $response$metaInfo$availableMapVersion ## [1] &quot;8.30.85.156&quot; ## ## ## $response$route ## waypoint ## 1 +18693161, +18769947, stopOver, stopOver, 0.3478261, 0.4118199, right, neither, W Mt Pleasant Ave, Fort Mifflin Rd, W Mt Pleasant Ave, Fort Mifflin Rd, 0, 188, 40.0568444, 39.8786749, -75.1911711, -75.2075897, 40.0567437, 39.8777652, -75.19102, -75.2059473 ## leg ## 1 27716, 9066, Head &lt;span class=&quot;heading&quot;&gt;northeast&lt;/span&gt; on &lt;span class=&quot;street&quot;&gt;W Mt Pleasant Ave&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;228 m&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;left&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;Germantown Ave&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;19 m&lt;/span&gt;.&lt;/span&gt;, Go to the stop &lt;span class=&quot;station&quot;&gt;Germantown Av &amp; Mt Pleasant Av&lt;/span&gt; and take the &lt;span class=&quot;transit&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;line&quot;&gt;23&lt;/span&gt; toward &lt;span class=&quot;destination&quot;&gt;11th St &amp; Market St -&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Follow for &lt;span class=&quot;stops&quot;&gt;43 stops&lt;/span&gt;.&lt;/span&gt;, Get off at &lt;span class=&quot;station&quot;&gt;Germantown Av &amp; Erie Av&lt;/span&gt;., Head &lt;span class=&quot;heading&quot;&gt;east&lt;/span&gt; on &lt;span class=&quot;street&quot;&gt;Germantown Ave&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;28 m&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;right&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;W Erie Ave&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;36 m&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;left&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;N Broad St&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;3 m&lt;/span&gt;.&lt;/span&gt;, Go to the station &lt;span class=&quot;station&quot;&gt;Erie Station&lt;/span&gt; and take the &lt;span class=&quot;transit&quot;&gt;rail&lt;/span&gt; &lt;span class=&quot;line&quot;&gt;BSL&lt;/span&gt; toward &lt;span class=&quot;destination&quot;&gt;at&amp;T Station&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Follow for &lt;span class=&quot;stops&quot;&gt;15 stations&lt;/span&gt;.&lt;/span&gt;, Get off at &lt;span class=&quot;station&quot;&gt;Oregon Station&lt;/span&gt;., Head &lt;span class=&quot;heading&quot;&gt;northeast&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;10 m&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;slightly left&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;S Broad St&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;25 m&lt;/span&gt;.&lt;/span&gt;, Go to the stop &lt;span class=&quot;station&quot;&gt;Oregon Av &amp; Broad St&lt;/span&gt; and take the &lt;span class=&quot;transit&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;line&quot;&gt;68&lt;/span&gt; toward &lt;span class=&quot;destination&quot;&gt;69th St Transportation Center South Terminal&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Follow for &lt;span class=&quot;stops&quot;&gt;16 stops&lt;/span&gt;.&lt;/span&gt;, Get off at &lt;span class=&quot;station&quot;&gt;Enterprise Av &amp; Fort Mifflin Rd&lt;/span&gt;., Head &lt;span class=&quot;heading&quot;&gt;northwest&lt;/span&gt; on &lt;span class=&quot;street&quot;&gt;Enterprise Ave&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;32 m&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;right&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;Fort Mifflin Rd&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;1.7 km&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;left&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;Fort Mifflin Rd&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;75 m&lt;/span&gt;.&lt;/span&gt;, Take the street on the &lt;span class=&quot;direction&quot;&gt;right&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;734 m&lt;/span&gt;.&lt;/span&gt;, Arrive at &lt;span class=&quot;street&quot;&gt;Fort Mifflin Rd&lt;/span&gt;., 237, 19, 1770, 0, 41, 46, 3, 1610, 0, 14, 25, 2720, 0, 42, 1723, 76, 740, 0, 228, 19, 6529, 0, 28, 36, 3, 10420, 0, 10, 25, 7864, 0, 32, 1713, 75, 734, 0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14, M15, M16, M17, M18, PrivateTransportManeuverType, PrivateTransportManeuverType, PublicTransportManeuverType, PublicTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PublicTransportManeuverType, PublicTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PublicTransportManeuverType, PublicTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, NA, NA, Germantown Av &amp; Mt Pleasant Av, Germantown Av &amp; Erie Av, NA, NA, NA, Erie Station, Oregon Station, NA, NA, Oregon Av &amp; Broad St, Enterprise Av &amp; Fort Mifflin Rd, NA, NA, NA, NA, NA, NA, NA, NA, Germantown Ave, NA, NA, NA, NA, NA, NA, NA, NA, Enterprise Ave, NA, NA, NA, NA, NA, 40.0568444, 40.0583732, 40.0583732, 40.0094068, 40.0094068, 40.0092137, 40.0092459, 40.0092459, 39.9167848, 39.9167848, 39.9168277, 39.9168277, 39.8836005, 39.8836005, 39.8837721, 39.8775494, 39.8770881, 39.8786749, -75.1911711, -75.189389, -75.189389, -75.1509583, -75.1509583, -75.1508081, -75.1512265, -75.1513124, -75.1714182, -75.1714182, -75.1713324, -75.1713324, -75.2235281, -75.2235281, -75.223335, -75.2135289, -75.2129066, -75.2075897, +18693161, stopOver, 0.3478261, right, W Mt Pleasant Ave, W Mt Pleasant Ave, 0, 40.0568444, -75.1911711, 40.0567437, -75.19102, +18769947, stopOver, 0.4118199, neither, Fort Mifflin Rd, Fort Mifflin Rd, 188, 39.8786749, -75.2075897, 39.8777652, -75.2059473 ## publicTransportLine ## 1 23, BSL, 68, , , , 11th St &amp; Market St -, at&amp;T Station, 69th St Transportation Center South Terminal, busPublic, railMetro, busPublic, L1, L2, L3, NA, #FF9933, NA, NA, #FF9933, NA ## mode.type mode.transportModes mode.trafficMode mode.feature ## 1 fastest publicTransport disabled NULL ## summary.distance summary.baseTime ## 1 27716 9066 ## summary.flags ## 1 noThroughRoad, builtUpArea, park, privateRoad ## summary.text ## 1 The trip takes &lt;span class=&quot;length&quot;&gt;27.7 km&lt;/span&gt; and &lt;span class=&quot;time&quot;&gt;2:31 h&lt;/span&gt;. ## summary.travelTime summary.departure ## 1 9066 2018-07-18T12:00:00-04:00 ## summary._type ## 1 PublicTransportRouteSummaryType ## ## $response$language ## [1] &quot;en-us&quot; step 4 final_url_test &lt;- as.data.frame(json_url_test) ## response.metaInfo.timestamp response.metaInfo.mapVersion ## 1 2018-07-23T23:08:13Z 8.30.85.156 ## response.metaInfo.moduleVersion response.metaInfo.interfaceVersion ## 1 7.2.201829-33197 2.6.34 ## response.metaInfo.availableMapVersion ## 1 8.30.85.156 ## response.route.waypoint ## 1 +18693161, +18769947, stopOver, stopOver, 0.3478261, 0.4118199, right, neither, W Mt Pleasant Ave, Fort Mifflin Rd, W Mt Pleasant Ave, Fort Mifflin Rd, 0, 188, 40.0568444, 39.8786749, -75.1911711, -75.2075897, 40.0567437, 39.8777652, -75.19102, -75.2059473 ## response.route.leg ## 1 27716, 9066, Head &lt;span class=&quot;heading&quot;&gt;northeast&lt;/span&gt; on &lt;span class=&quot;street&quot;&gt;W Mt Pleasant Ave&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;228 m&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;left&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;Germantown Ave&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;19 m&lt;/span&gt;.&lt;/span&gt;, Go to the stop &lt;span class=&quot;station&quot;&gt;Germantown Av &amp; Mt Pleasant Av&lt;/span&gt; and take the &lt;span class=&quot;transit&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;line&quot;&gt;23&lt;/span&gt; toward &lt;span class=&quot;destination&quot;&gt;11th St &amp; Market St -&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Follow for &lt;span class=&quot;stops&quot;&gt;43 stops&lt;/span&gt;.&lt;/span&gt;, Get off at &lt;span class=&quot;station&quot;&gt;Germantown Av &amp; Erie Av&lt;/span&gt;., Head &lt;span class=&quot;heading&quot;&gt;east&lt;/span&gt; on &lt;span class=&quot;street&quot;&gt;Germantown Ave&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;28 m&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;right&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;W Erie Ave&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;36 m&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;left&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;N Broad St&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;3 m&lt;/span&gt;.&lt;/span&gt;, Go to the station &lt;span class=&quot;station&quot;&gt;Erie Station&lt;/span&gt; and take the &lt;span class=&quot;transit&quot;&gt;rail&lt;/span&gt; &lt;span class=&quot;line&quot;&gt;BSL&lt;/span&gt; toward &lt;span class=&quot;destination&quot;&gt;at&amp;T Station&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Follow for &lt;span class=&quot;stops&quot;&gt;15 stations&lt;/span&gt;.&lt;/span&gt;, Get off at &lt;span class=&quot;station&quot;&gt;Oregon Station&lt;/span&gt;., Head &lt;span class=&quot;heading&quot;&gt;northeast&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;10 m&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;slightly left&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;S Broad St&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;25 m&lt;/span&gt;.&lt;/span&gt;, Go to the stop &lt;span class=&quot;station&quot;&gt;Oregon Av &amp; Broad St&lt;/span&gt; and take the &lt;span class=&quot;transit&quot;&gt;bus&lt;/span&gt; &lt;span class=&quot;line&quot;&gt;68&lt;/span&gt; toward &lt;span class=&quot;destination&quot;&gt;69th St Transportation Center South Terminal&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Follow for &lt;span class=&quot;stops&quot;&gt;16 stops&lt;/span&gt;.&lt;/span&gt;, Get off at &lt;span class=&quot;station&quot;&gt;Enterprise Av &amp; Fort Mifflin Rd&lt;/span&gt;., Head &lt;span class=&quot;heading&quot;&gt;northwest&lt;/span&gt; on &lt;span class=&quot;street&quot;&gt;Enterprise Ave&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;32 m&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;right&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;Fort Mifflin Rd&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;1.7 km&lt;/span&gt;.&lt;/span&gt;, Turn &lt;span class=&quot;direction&quot;&gt;left&lt;/span&gt; onto &lt;span class=&quot;next-street&quot;&gt;Fort Mifflin Rd&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;75 m&lt;/span&gt;.&lt;/span&gt;, Take the street on the &lt;span class=&quot;direction&quot;&gt;right&lt;/span&gt;. &lt;span class=&quot;distance-description&quot;&gt;Go for &lt;span class=&quot;length&quot;&gt;734 m&lt;/span&gt;.&lt;/span&gt;, Arrive at &lt;span class=&quot;street&quot;&gt;Fort Mifflin Rd&lt;/span&gt;., 237, 19, 1770, 0, 41, 46, 3, 1610, 0, 14, 25, 2720, 0, 42, 1723, 76, 740, 0, 228, 19, 6529, 0, 28, 36, 3, 10420, 0, 10, 25, 7864, 0, 32, 1713, 75, 734, 0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14, M15, M16, M17, M18, PrivateTransportManeuverType, PrivateTransportManeuverType, PublicTransportManeuverType, PublicTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PublicTransportManeuverType, PublicTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PublicTransportManeuverType, PublicTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, PrivateTransportManeuverType, NA, NA, Germantown Av &amp; Mt Pleasant Av, Germantown Av &amp; Erie Av, NA, NA, NA, Erie Station, Oregon Station, NA, NA, Oregon Av &amp; Broad St, Enterprise Av &amp; Fort Mifflin Rd, NA, NA, NA, NA, NA, NA, NA, NA, Germantown Ave, NA, NA, NA, NA, NA, NA, NA, NA, Enterprise Ave, NA, NA, NA, NA, NA, 40.0568444, 40.0583732, 40.0583732, 40.0094068, 40.0094068, 40.0092137, 40.0092459, 40.0092459, 39.9167848, 39.9167848, 39.9168277, 39.9168277, 39.8836005, 39.8836005, 39.8837721, 39.8775494, 39.8770881, 39.8786749, -75.1911711, -75.189389, -75.189389, -75.1509583, -75.1509583, -75.1508081, -75.1512265, -75.1513124, -75.1714182, -75.1714182, -75.1713324, -75.1713324, -75.2235281, -75.2235281, -75.223335, -75.2135289, -75.2129066, -75.2075897, +18693161, stopOver, 0.3478261, right, W Mt Pleasant Ave, W Mt Pleasant Ave, 0, 40.0568444, -75.1911711, 40.0567437, -75.19102, +18769947, stopOver, 0.4118199, neither, Fort Mifflin Rd, Fort Mifflin Rd, 188, 39.8786749, -75.2075897, 39.8777652, -75.2059473 ## response.route.publicTransportLine ## 1 23, BSL, 68, , , , 11th St &amp; Market St -, at&amp;T Station, 69th St Transportation Center South Terminal, busPublic, railMetro, busPublic, L1, L2, L3, NA, #FF9933, NA, NA, #FF9933, NA ## response.route.mode.type response.route.mode.transportModes ## 1 fastest publicTransport ## response.route.mode.trafficMode response.route.mode.feature ## 1 disabled NULL ## response.route.summary.distance response.route.summary.baseTime ## 1 27716 9066 ## response.route.summary.flags ## 1 noThroughRoad, builtUpArea, park, privateRoad ## response.route.summary.text ## 1 The trip takes &lt;span class=&quot;length&quot;&gt;27.7 km&lt;/span&gt; and &lt;span class=&quot;time&quot;&gt;2:31 h&lt;/span&gt;. ## response.route.summary.travelTime response.route.summary.departure ## 1 9066 2018-07-18T12:00:00-04:00 ## response.route.summary._type response.language ## 1 PublicTransportRouteSummaryType en-us 0.0.1 Preparing Looping Functions for Parallel #gets the Data from HERE API get_city = foreach(i=urls, .packages=&#39;httr&#39;) %dopar% { GET(i) } status_code(results[[1]]) #Can check some to ensure it worked #Gets the Json Content content_city = foreach(i=get_city, .packages=&#39;httr&#39;) %dopar% { content(i, &quot;text&quot;) } #munging #makes the json data semi pretty json_city = foreach(i=content_city, .packages=&#39;jsonlite&#39;) %dopar% { fromJSON(i, flatten = TRUE) } df_city = foreach(i=json_city) %dopar% { as.data.frame(i) } full &lt;- rbindlist(df_city, fill = TRUE) Plan of Attack To solve my 2nd large issue, I decided to leverage the resources of my university. Generally, the idea is to split up the urls into multiple lists, then run each set of URLs independently on several computers. To split up the URLs: list_of_URLs &lt;- split(urls, ceiling(seq_along(urls)/15000)) str(list_of_URLs) ## List of 6 ## $ 1: chr [1:15000] &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.88889%2C-75.23410&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.88889%2C-75.23410&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.88889%2C-75.23410&amp;waypoint1=2%2C40.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.88889%2C-75.23410&amp;waypoint1=2%2C40.&quot;| __truncated__ ... ## $ 2: chr [1:15000] &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.06858%2C-75.21000&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.06858%2C-75.21000&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.06858%2C-75.21000&amp;waypoint1=2%2C40.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.06858%2C-75.21000&amp;waypoint1=2%2C40.&quot;| __truncated__ ... ## $ 3: chr [1:15000] &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.00122%2C-75.18086&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.00122%2C-75.18086&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.00122%2C-75.18086&amp;waypoint1=2%2C40.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.00122%2C-75.18086&amp;waypoint1=2%2C40.&quot;| __truncated__ ... ## $ 4: chr [1:15000] &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.95260%2C-75.19975&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.95260%2C-75.19975&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.95260%2C-75.19975&amp;waypoint1=2%2C40.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.95260%2C-75.19975&amp;waypoint1=2%2C40.&quot;| __truncated__ ... ## $ 5: chr [1:15000] &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.02618%2C-75.04135&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.02618%2C-75.04135&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.02618%2C-75.04135&amp;waypoint1=2%2C40.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.02618%2C-75.04135&amp;waypoint1=2%2C40.&quot;| __truncated__ ... ## $ 6: chr [1:15000] &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.86991%2C-75.21043&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.86991%2C-75.21043&amp;waypoint1=2%2C39.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.86991%2C-75.21043&amp;waypoint1=2%2C40.&quot;| __truncated__ &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=39.86991%2C-75.21043&amp;waypoint1=2%2C40.&quot;| __truncated__ ... Then on each computer I would run the code, but first specify: urls&lt;- list_of_URLs[[2]] #insert whatever subset you want to use str(urls) ## chr [1:15000] &quot;https://route.cit.api.here.com/routing/7.2/calculateroute.json?waypoint0=40.06858%2C-75.21000&amp;waypoint1=2%2C39.&quot;| __truncated__ ... This worked magically. I used several computers over 3 days and got all the data I need. The internet and books constantly preached that 80% of these tasks are data collection / wrangling and only 20% was the actual analysis. I think I finally understand what they mean…But now for the fun! The conclusions and results!!! One of only 3 positions in life that take shotgun seat in front of good friend. The other two being parents and grandparents.↩ One of only 3 positions in life that take shotgun seat in front of good friend. The other two being parents and grandparents.↩ "],
["part-5-results-and-conclusion.html", "Part 5: Results and Conclusion Introduction Summary of Results histograms scatterplots The “bad luck” trips The EVIL NY POINT Philadelphia Neighborhoods individual", " Part 5: Results and Conclusion Introduction What the problem is: scope next Summary of Results DC minutes Philly minutes NYC minutes DC miles Philly miles NYC miles Min 0.00000 0.00000 0.0000 0.000000 0.000000 0.000000 1st Qu 55.30000 80.31667 83.1500 4.250792 6.364693 11.294021 Median 72.03333 107.78333 111.7500 6.877634 10.163438 18.151150 Mean 72.52182 116.91172 117.0508 7.119155 10.623455 19.113244 3rd Qu 89.18333 138.43333 141.0000 9.775393 14.337647 26.475954 Max 163.83333 516.33333 1316.0500 19.387365 41.823172 68.265572 St. Dev. 24.61760 61.82033 79.8526 3.620629 5.549423 9.939558 What to say here: dc looking good least amount of skew (look at that close mean and median) lowest everything learned later on that this is partially due to DC NY and Philly are pretty close ew, look at those max values (we’ll look at that soon) the difference in sd between minutes and miles is interesting maybe google how to look into that histograms Clearly some issues with NY and philadelphia: as suspected, DC is beautiful the skew of Philly and NYC is surprisingly bad scatterplots Looking at these summary statistics and histogram, I would like to put forward an axiom: Any trip over three hours, in this situation, can be defined as “Shit Luck” good points are in light blue, Bad points are in dark blue, truly evil points in black: let’s split this shit up normal &lt; 180 180 &lt; bad &lt; 300 evil &gt; 300 Percent of Bad Trips DC PH NY 3 hour trip 0.00 8.12 5.98 2 hour trip 2.96 38.85 42.65 Here I will talk about this shit cause Im dope as fuck it is the percent of bad trips in each city Here are the scatterplots of only trips less than 3 hours shows a pretty nice casual relationship discuss each DC being a tiny city is hugely helpful The “bad luck” trips Both New York City and Philadelphia have some weird clusters of points evident from their scatter plot. Let’s look at the trips that take more than 400 minutes. start_latitude Freq end_latitude Freq start_latitude Freq end_latitude Freq 39.8888 288 39.8888 94 40.5404671945649 259 NA NA 39.9010033 93 39.8911694 18 NA NA NA 40.0535197 33 39.9755981 3 NA NA NA 39.8840912 2 40.0324002 3 NA NA NA 39.9413149 2 40.0514994 3 NA NA NA 39.9541915 2 40.0526994 3 NA NA NA Here: several points in Philly Only 1 in NYC WTF is up with these points? The EVIL NY POINT Here is: The routes That one point everything is going towards Philadelphia Here is: The routee there are several points that everything comes/goes to see leaflet and rewrite What’s happening here: I have take a sample of 50 routes from the top 10% of trips, bottom 10% of cities, and middle 50 plotted those routes Sample of Short, Medium, and Long Trips Neighborhoods individual okay so app being in the rivers or oceans can be both really negative and realy positive One of the coolest things about NYC is the spread of the best locations to start. DC and Philly, they’re very bunched up. "]
]
